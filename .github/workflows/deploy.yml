name: üöÄ Deploy
on:
  push:
    branches:
      - main
      - dev
  pull_request: {}

permissions:
  actions: write
  contents: read

jobs:
    lint:
        name: üßπ Lint
        runs-on: ubuntu-latest
        steps:
          - name: Checkout code
            uses: actions/checkout@v4.1.1
          - name: Install dependencies
            run: npm install

    typecheck:
        name: üîé Type check
        runs-on: ubuntu-latest
        steps:
          - name: Checkout code
            uses: actions/checkout@v4.1.1
          - name: Install dependencies
            run: npm install

    build:
        name: üê≥ Build
        uses: ./.github/workflows/build.yml
        secrets: inherit
            
    deploy:
        name: üöÄ Deploy
        runs-on: [self-hosted]
        needs: [lint, typecheck, build]
        if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
        steps:
            - name: ‚¨áÔ∏è Checkout repo
              uses: actions/checkout@v4.1.1

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}
            - name: üìù Create .env file
              run: |
                  echo "PGUSER=${{ secrets.PGUSER }}" >> .env
                  echo "PGHOST=${{ secrets.PGHOST }}" >> .env
                  echo "PGDATABASE=${{ secrets.PGDATABASE }}" >> .env
                  echo "PGPASSWORD=${{ secrets.PGPASSWORD }}" >> .env
                  echo "PGPORT=${{ secrets.PGPORT }}" >> .env
                  echo "PORT=8888" >> .env
            - name: üîç V√©rifier les fichiers
              run: |
                echo "Liste des fichiers dans le r√©pertoire actuel :"
                ls -la
                echo "V√©rification de l'existence du fichier .env :"
                if [ -f .env ]; then
                  echo ".env a √©t√© cr√©√© avec succ√®s."
                else
                  echo "Erreur : le fichier .env n'existe pas."
                  exit 1
                fi
            - name: üöÄ Transf√©rer les fichiers au VPS
              uses: appleboy/scp-action@v0.1.0
              with:
                host: ${{ secrets.VPS_HOST }}
                username: ${{ secrets.VPS_USER }}
                key: ${{ secrets.SSH_PRIVATE_KEY }}
                source: |
                  docker-compose.yml
                  .env
                target: /home/${{ secrets.VPS_USER }}/Boutique-NoName/
                port: 22
                timeout: 30s
                command_timeout: 10m
                use_insecure_cipher: false
                rm: false
                debug: true  # Activer le mode debug pour plus de d√©tails
                strip_components: 0
                overwrite: true

            - name: üöÄ Run Docker Compose on Production
              uses: appleboy/ssh-action@v0.1.3
              with:
                host: ${{ secrets.VPS_HOST }}
                username: ${{ secrets.VPS_USER }}
                key: ${{ secrets.SSH_PRIVATE_KEY }}
                script: |
                  docker run -p 3000:3000 -p 5173:5173 -p 8888:8888 natixe28/boutique-noname:production 
                  docker-compose up -d --build
                  docker system prune --all --volumes --force
            - name: üßπ Cleanup .env
              run: rm .env    